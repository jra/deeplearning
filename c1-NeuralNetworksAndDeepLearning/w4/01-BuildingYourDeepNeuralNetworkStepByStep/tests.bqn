nn ← •Import "nn.bqn"

rand ← •MakeRand 0

n1 ← nn.Normal rand‿⟨0, 1⟩
•Show n1

n2 ← nn.Normal rand‿⟨0, 1⟩
•Show n2

n3 ← nn.Normal rand
•Show n3

n4 ← 3 nn.Normal rand‿⟨0, 1⟩
•Show n4

n5 ← 3 nn.Normal rand
•Show n5

n6 ← 2‿3 nn.Normal rand
•Show n6

ps ← nn.InitializeParameters 3‿2‿1
•Out "w1 = "∾•Repr ps.w1
•Out "b1 = "∾•Repr ps.b1
•Out "w2 = "∾•Repr ps.w2
•Out "b2 = "∾•Repr ps.b2

! 2‿3 ≡ ≢ps.w1
! ⟨2⟩ ≡ ≢ps.b1
! ∧´=⟜0¨⥊ps.b1
! 1‿2 ≡ ≢ps.w2
! ⟨1⟩ ≡ ≢ps.b2
! ∧´=⟜0¨⥊ps.b2

ws‿bs ← nn.InitializeParametersDeep 5‿4‿3

! 2=≠ws
! 2=≠bs
! 4‿5≡≢0⊑ws
! (≠=≠∘⍷)0⊑ws  # all unique
! (4⥊0)≡0⊑bs
! 3‿4≡≢1⊑ws
! (≠=≠∘⍷)1⊑ws  # all unique
! (3⥊0)≡1⊑bs

x ← @
y ← @
a ← @
w ← @
b ← @
z ← @
aa ← @
ww ← @
bb ← @
zz ← @
aPrev ← @
aL ← @
caches ← @

a ↩ [[ 1.62434536, -0.61175641]
     [-0.52817175, -1.07296862]
     [ 0.86540763, -2.3015387 ]]
w ↩ [[1.74481176, -0.7612069,   0.3190391]]
b ↩ ⟨-0.24937038⟩
z ↩ [[ 3.26295337, -1.23429987]]

zz‿⟨aa‿ww‿bb⟩ ↩ nn.LinearForward a‿w‿b

Close ← {
  d 𝕊 vs: ∧´ 0⊸=¨ ≠∘≢¨ vs ? (1=≠∘⍷) { (10⋆d)÷˜⌊𝕩×(10⋆d) }¨ vs ;
  d 𝕊 vs: (1≠≠∘⍷) ≢¨ vs ? 0 ;
  d 𝕊 vs: (1=≠∘⍷) { (10⋆d)÷˜⌊𝕩×(10⋆d) }¨ ⥊¨ vs
}

! (≢z)≡≢zz

! 7 Close z‿zz

aPrev ↩ [[-0.41675785, -0.05626683]
         [-2.1361961,   1.64027081]
         [-1.79343559, -0.84174737]]
w ↩ [[ 0.50288142, -1.24528809, -1.05795222]]
b ↩ ⟨-0.90900761⟩

truth ← {
  aWithSigmoid ⇐ [[0.96890023, 0.11013289]]
  aWithReLU ⇐ [[3.43896131, 0.0        ]]
}

aWithSigmoid‿· ← nn.LinearActivationForward aPrev‿w‿b‿nn.sigmoid
aWithReLU‿· ← nn.LinearActivationForward aPrev‿w‿b‿nn.reLU

#•Out "aWithSigmoid"
#•Show truth.aWithSigmoid
#•Show aWithSigmoid

#•Out "aWithReLU"
#•Show truth.aWithReLU
#•Show aWithReLU

! 7 Close truth.aWithSigmoid‿aWithSigmoid
! 7 Close truth.aWithReLU‿aWithReLU

x ↩ [[-0.31178367,  0.72900392,  0.21782079, -0.8990918 ]
     [-2.48678065,  0.91325152,  1.12706373, -1.51409323]
     [ 1.63929108, -0.42989360,  2.63128056,  0.60182225]
     [-0.33588161,  1.23773784,  0.11112817,  0.12915125]
     [ 0.07612761, -0.15512816,  0.63422534,  0.810655  ]]
ws ↩ ⟨
      [[ 0.35480861,  1.81259031, -1.3564758 , -0.46363197,  0.82465384]
       [-1.17643148,  1.56448966,  0.71270509, -0.1810066 ,  0.53419953]
       [-0.58661296, -1.48185327,  0.85724762,  0.94309899,  0.11444143]
       [-0.02195668, -2.12714455, -0.83440747, -0.46550831,  0.23371059]]
      [[-0.12673638, -1.36861282,  1.21848065, -0.85750144]
       [-0.56147088, -1.0335199 ,  0.35877096,  1.07368134]
       [-0.37550472,  0.39636757, -0.47144628,  2.33660781]]
      [[ 0.9398248 ,  0.42628539, -0.75815703]]
     ⟩
bs ↩ ⟨⟨ 1.38503523
       -0.51962709
       -0.78015214
        0.95560959 ⟩
      ⟨ 1.50278553
       -0.59545972
        0.52834106 ⟩
      ⟨-0.16236698 ⟩
     ⟩

truthAL ← [[0.03921668, 0.70498921, 0.19734387, 0.04728177]]

aL‿caches ↩ nn.LModelForward x‿ws‿bs

#•Show truthAL
#•Show aL

! 7 Close truthAL‿aL
! 3=≠caches

y ↩ [[1, 1, 0]]
aL ↩ [[0.8, 0.9, 0.4]]

truthCost ← 0.2797765635793422

cost ← nn.ComputeCost aL‿y

! 7 Close truthCost‿cost
